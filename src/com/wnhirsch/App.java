/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.wnhirsch;

import java.awt.HeadlessException;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Wellington
 */
public class App extends javax.swing.JFrame {

    private BufferedImage imageIn;
    private BufferedImage imageOut;
    private ImageManip imageFunctions;
    
    /**
     * Creates new form App
     */
    public App() {
        this.imageFunctions = new ImageManip();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imageInPanel = new javax.swing.JPanel();
        imageInLabel = new javax.swing.JLabel();
        imageOutPanel = new javax.swing.JPanel();
        imageOutLabel = new javax.swing.JLabel();
        menuPanel = new javax.swing.JPanel();
        btn_readImge = new javax.swing.JButton();
        btn_saveImage = new javax.swing.JButton();
        btn_grayScale = new javax.swing.JButton();
        btn_negative = new javax.swing.JButton();
        btn_vertMirror = new javax.swing.JButton();
        btn_horizMirror = new javax.swing.JButton();
        btn_brightness = new javax.swing.JButton();
        btn_contrast = new javax.swing.JButton();
        btn_quantImage = new javax.swing.JButton();
        btn_reduceImg = new javax.swing.JButton();
        btn_enlargeImg = new javax.swing.JButton();
        btn_clockwiseImg = new javax.swing.JButton();
        btn_anticlockwiseImg = new javax.swing.JButton();
        btn_convolutionImg = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PhotoChopp - FPI");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(0, 0));
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(1200, 450));
        setMinimumSize(new java.awt.Dimension(1200, 450));
        setPreferredSize(new java.awt.Dimension(1200, 450));
        setResizable(false);
        setSize(new java.awt.Dimension(1200, 450));

        imageInPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imageInPanel.setAlignmentX(0.0F);
        imageInPanel.setAlignmentY(0.0F);
        imageInPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        imageInPanel.setMaximumSize(new java.awt.Dimension(450, 450));
        imageInPanel.setMinimumSize(new java.awt.Dimension(450, 450));
        imageInPanel.setPreferredSize(new java.awt.Dimension(450, 450));

        imageInLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageInLabel.setToolTipText("Input Image.");
        imageInLabel.setAlignmentY(0.0F);
        imageInLabel.setMaximumSize(new java.awt.Dimension(450, 450));
        imageInLabel.setMinimumSize(new java.awt.Dimension(450, 450));
        imageInLabel.setPreferredSize(new java.awt.Dimension(450, 450));

        javax.swing.GroupLayout imageInPanelLayout = new javax.swing.GroupLayout(imageInPanel);
        imageInPanel.setLayout(imageInPanelLayout);
        imageInPanelLayout.setHorizontalGroup(
            imageInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageInLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        imageInPanelLayout.setVerticalGroup(
            imageInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageInLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        imageOutPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imageOutPanel.setToolTipText("");
        imageOutPanel.setAlignmentX(0.0F);
        imageOutPanel.setAlignmentY(0.0F);
        imageOutPanel.setMaximumSize(new java.awt.Dimension(450, 450));
        imageOutPanel.setMinimumSize(new java.awt.Dimension(450, 450));
        imageOutPanel.setPreferredSize(new java.awt.Dimension(450, 450));

        imageOutLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageOutLabel.setToolTipText("Output Image.");
        imageOutLabel.setAlignmentY(0.0F);
        imageOutLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        imageOutLabel.setMaximumSize(new java.awt.Dimension(450, 450));
        imageOutLabel.setMinimumSize(new java.awt.Dimension(450, 450));
        imageOutLabel.setPreferredSize(new java.awt.Dimension(450, 450));

        javax.swing.GroupLayout imageOutPanelLayout = new javax.swing.GroupLayout(imageOutPanel);
        imageOutPanel.setLayout(imageOutPanelLayout);
        imageOutPanelLayout.setHorizontalGroup(
            imageOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageOutLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        imageOutPanelLayout.setVerticalGroup(
            imageOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageOutLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        menuPanel.setMaximumSize(new java.awt.Dimension(225, 450));
        menuPanel.setMinimumSize(new java.awt.Dimension(225, 450));
        menuPanel.setPreferredSize(new java.awt.Dimension(225, 450));

        btn_readImge.setText("Open Image");
        btn_readImge.setToolTipText("Choose an input image in JPEG format to read and edit it.");
        btn_readImge.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_readImge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_readImgeActionPerformed(evt);
            }
        });

        btn_saveImage.setText("Save Image");
        btn_saveImage.setToolTipText("Choose a directory to save the edited image.");
        btn_saveImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_saveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveImageActionPerformed(evt);
            }
        });

        btn_grayScale.setText("Apply Grayscale");
        btn_grayScale.setToolTipText("Apply Grayscale filter to output image (2nd panel).");
        btn_grayScale.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_grayScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_grayScaleActionPerformed(evt);
            }
        });

        btn_negative.setText("Apply Negative");
        btn_negative.setToolTipText("Apply Negative filter to output image (2nd panel).");
        btn_negative.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_negative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_negativeActionPerformed(evt);
            }
        });

        btn_vertMirror.setText("Vertical Mirroring");
        btn_vertMirror.setToolTipText("Apply Vertical Mirroring to output image (2nd panel).");
        btn_vertMirror.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_vertMirror.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_vertMirrorActionPerformed(evt);
            }
        });

        btn_horizMirror.setText("Horizontal Mirroring");
        btn_horizMirror.setToolTipText("Apply Horizontal Mirroring to output image (2nd panel).");
        btn_horizMirror.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_horizMirror.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_horizMirrorActionPerformed(evt);
            }
        });

        btn_brightness.setText("Brightness");
        btn_brightness.setToolTipText("Change the Brightness Intensity in output image (2nd panel).");
        btn_brightness.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_brightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_brightnessActionPerformed(evt);
            }
        });

        btn_contrast.setText("Contrast");
        btn_contrast.setToolTipText("Change the Contrast Intensity in output image (2nd panel).");
        btn_contrast.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_contrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_contrastActionPerformed(evt);
            }
        });

        btn_quantImage.setText("Apply Quantize");
        btn_quantImage.setToolTipText("Quantize output image (2nd panel) with N shades.");
        btn_quantImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_quantImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_quantImageActionPerformed(evt);
            }
        });

        btn_reduceImg.setText("Reduce Image");
        btn_reduceImg.setToolTipText("Reduce output image (2nd panel) based on 2 factors size.");
        btn_reduceImg.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_reduceImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_reduceImgActionPerformed(evt);
            }
        });

        btn_enlargeImg.setText("Enlarge Image");
        btn_enlargeImg.setToolTipText("Duplicate the output image size (2nd panel).");
        btn_enlargeImg.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_enlargeImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_enlargeImgActionPerformed(evt);
            }
        });

        btn_clockwiseImg.setText("Clockwise Rotate");
        btn_clockwiseImg.setToolTipText("Rotate output image (2nd panel) 90 degrees clockwise.");
        btn_clockwiseImg.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_clockwiseImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clockwiseImgActionPerformed(evt);
            }
        });

        btn_anticlockwiseImg.setText("Anticlockwise Rotate");
        btn_anticlockwiseImg.setToolTipText("Rotate output image (2nd panel) 90 degrees anticlockwise.");
        btn_anticlockwiseImg.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_anticlockwiseImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_anticlockwiseImgActionPerformed(evt);
            }
        });

        btn_convolutionImg.setText("Apply Convolution");
        btn_convolutionImg.setToolTipText("Apply a Convolution in output image (2nd panel) using a standard kernels or creating yours.");
        btn_convolutionImg.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_convolutionImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_convolutionImgActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setLabelFor(this);
        jLabel1.setText("<html>* Some functions not allowed if your output<br/> image (2nd panel) isn't in grayscale.</html>");

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(btn_convolutionImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_quantImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_saveImage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_readImge, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, menuPanelLayout.createSequentialGroup()
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_anticlockwiseImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_reduceImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_enlargeImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_clockwiseImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, menuPanelLayout.createSequentialGroup()
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btn_vertMirror, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(btn_brightness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_grayScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_negative, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_contrast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_horizMirror, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))))
                .addGap(67, 67, 67))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btn_readImge)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_saveImage)
                .addGap(18, 18, 18)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_grayScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_negative))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_horizMirror, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_vertMirror, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_contrast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_brightness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_quantImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_reduceImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_enlargeImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_clockwiseImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_anticlockwiseImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_convolutionImg)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
        );

        jLabel1.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imageInPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(imageOutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageInPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(imageOutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_reduceImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_reduceImgActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            int sx = 0, sy = 0;
            boolean isNaN;
            do{
                isNaN = false;
                String[] data;
                String info = "Enter 2 factors greater or equal to 1 to reduce image (factorX;factorY)"
                            + "\nExample: '2;3'";
                try{
                    data = JOptionPane.showInputDialog(info).split(";");
                    try{
                        if(data.length == 2){
                            sx = Integer.parseInt(data[0]);
                            sy = Integer.parseInt(data[1]);
                        }
                    }
                    catch(NumberFormatException e){
                        isNaN = true;
                    }
                }
                catch(NullPointerException e){
                    break;
                }
            }while(!(sx >= 1 && sy >= 1) || isNaN);
            if(sx >= 1 && sy >= 1) {
                imageOut = imageFunctions.reduceImg(imageOut,sx,sy);
                imageOutLabel.setIcon(new ImageIcon(imageOut));
            }
        }
    }//GEN-LAST:event_btn_reduceImgActionPerformed

    private void btn_clockwiseImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clockwiseImgActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            imageOut = imageFunctions.clockwiseImg(imageOut);
            imageOutLabel.setIcon(new ImageIcon(imageOut));
        }
    }//GEN-LAST:event_btn_clockwiseImgActionPerformed

    private void btn_enlargeImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_enlargeImgActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            imageOut = imageFunctions.enlargeImg(imageOut);
            imageOutLabel.setIcon(new ImageIcon(imageOut));
        }
    }//GEN-LAST:event_btn_enlargeImgActionPerformed

    private void btn_anticlockwiseImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_anticlockwiseImgActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            imageOut = imageFunctions.anticlockwiseImg(imageOut);
            imageOutLabel.setIcon(new ImageIcon(imageOut));
        }
    }//GEN-LAST:event_btn_anticlockwiseImgActionPerformed

    private void btn_convolutionImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_convolutionImgActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            if(imageOut.getType() == BufferedImage.TYPE_BYTE_GRAY){
                int kernelOpt = -1;
                double[][] kernelUser = new double[3][3];
                boolean isNaN;
                do{
                    isNaN = false;
                    String[] data;
                    String info = "Choose a kernel option from the list below typing your code OR creating yours."
                                + "\n0 to Gaussian Filter;"
                                + "\n1 to Laplacian Filter;"
                                + "\n2 to High-Pass Filter"
                                + "\n3 to Prewitt Hx"
                                + "\n4 to Prewitt Hy Hx"
                                + "\n5 to Sobel Hx"
                                + "\n6 to Sobel Hy"
                                + "\nExample: '1.0;2.0;3.0;4.0;5.0;6.0;7.0;8.0;9.0'";
                    try{
                        data = JOptionPane.showInputDialog(info).split(";");
                        try{
                            if(data.length == 1){
                                kernelOpt = Integer.parseInt(data[0]);
                            }
                            else if(data.length == 9){
                                for(int yk = 0; yk < 3; yk++){
                                    for(int xk = 0; xk < 3; xk++){
                                        kernelUser[xk][yk] = Double.parseDouble(data[3*yk + xk]);
                                        System.out.println(kernelUser[xk][yk]);
                                    }
                                }
                                kernelOpt = 7;
                            }
                            System.out.println(kernelOpt);
                        }
                        catch(NumberFormatException e){
                            isNaN = true;
                        }
                    }
                    catch(NullPointerException e){
                        break;
                    }
                }while(kernelOpt < 0 || isNaN);
                switch(kernelOpt){
                    case 0:
                        imageOut = imageFunctions.convolutionImg(imageOut,imageFunctions.gaussiano,false);
                        imageOutLabel.setIcon(new ImageIcon(imageOut));
                        break;
                    case 1:
                        imageOut = imageFunctions.convolutionImg(imageOut,imageFunctions.laplaciano,false);
                        imageOutLabel.setIcon(new ImageIcon(imageOut));
                        break;
                    case 2:
                        imageOut = imageFunctions.convolutionImg(imageOut,imageFunctions.genPH,false);
                        imageOutLabel.setIcon(new ImageIcon(imageOut));
                        break;
                    case 3:
                        imageOut = imageFunctions.convolutionImg(imageOut,imageFunctions.preHX,true);
                        imageOutLabel.setIcon(new ImageIcon(imageOut));
                        break;
                    case 4:
                        imageOut = imageFunctions.convolutionImg(imageOut,imageFunctions.preHYHX,true);
                        imageOutLabel.setIcon(new ImageIcon(imageOut));
                        break;
                    case 5:
                        imageOut = imageFunctions.convolutionImg(imageOut,imageFunctions.sobelHX,true);
                        imageOutLabel.setIcon(new ImageIcon(imageOut));
                        break;
                    case 6:
                        imageOut = imageFunctions.convolutionImg(imageOut,imageFunctions.sobelHY,true);
                        imageOutLabel.setIcon(new ImageIcon(imageOut));
                        break;
                    case 7:
                        imageOut = imageFunctions.convolutionImg(imageOut,kernelUser,true);
                        imageOutLabel.setIcon(new ImageIcon(imageOut));
                        break;
                }
            }  
        }
    }//GEN-LAST:event_btn_convolutionImgActionPerformed

    private void btn_contrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_contrastActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            double intensity = -1.0;
            boolean isNaN;
            do{
                isNaN = false;
                String data;
                String info = "Enter intensity number in the range (0.0, 255,0] to increase contrast."
                            + "\nExample: '127.0'";
                data = JOptionPane.showInputDialog(info);
                if(data == null){
                    break;
                }
                try{
                    intensity = Double.parseDouble(data);
                }
                catch(NumberFormatException e){
                    isNaN = true;
                }
            }while(!(intensity > 0.0 && intensity <= 255.0) || isNaN);
            if(intensity > 0.0 && intensity <= 255) {
                imageOut = imageFunctions.contrastInc(imageOut,intensity);
                imageOutLabel.setIcon(new ImageIcon(imageOut));
            }
        }
    }//GEN-LAST:event_btn_contrastActionPerformed

    private void btn_brightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_brightnessActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            int intensity = 256;
            boolean isNaN;
            do{
                
                isNaN = false;
                String data;
                String info = "Enter intensity number in the range (-255, 255] to increase brightness."
                            + "\nExample: '-127'";
                data = JOptionPane.showInputDialog(info);
                if(data == null){
                    break;
                }
                try{
                    intensity = Integer.parseInt(data);
                }
                catch(NumberFormatException e){
                    isNaN = true;
                }
            }while(!(intensity >= -255 && intensity <= 255) || isNaN);
            if(intensity >= -255 && intensity <= 255) {
                imageOut = imageFunctions.brightnessInc(imageOut,intensity);
                imageOutLabel.setIcon(new ImageIcon(imageOut));
            }
        }
    }//GEN-LAST:event_btn_brightnessActionPerformed

    private void btn_quantImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_quantImageActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            if(imageOut.getType() == BufferedImage.TYPE_BYTE_GRAY){
                int shades = -1;
                boolean isNaN;
                do{

                    isNaN = false;
                    String data;
                    String info = "Enter shades number in the range (0, 255] to quantize image."
                                + "\nExample: '127'";
                    data = JOptionPane.showInputDialog(info);
                    if(data == null){
                        break;
                    }
                    try{
                        shades = Integer.parseInt(data);
                    }
                    catch(NumberFormatException e){
                        isNaN = true;
                    }
                }while(!(shades > 0 && shades <= 255) || isNaN);
                if(shades > 0 && shades <= 255) {
                    imageOut = imageFunctions.quantizeImage(imageOut,shades);
                    imageOutLabel.setIcon(new ImageIcon(imageOut));
                }
            }
        }
    }//GEN-LAST:event_btn_quantImageActionPerformed

    private void btn_horizMirrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_horizMirrorActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            imageOut = imageFunctions.horizMirror(imageOut);
            imageOutLabel.setIcon(new ImageIcon(imageOut));
        }
    }//GEN-LAST:event_btn_horizMirrorActionPerformed

    private void btn_vertMirrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_vertMirrorActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            imageOut = imageFunctions.vertMirror(imageOut);
            imageOutLabel.setIcon(new ImageIcon(imageOut));
        }
    }//GEN-LAST:event_btn_vertMirrorActionPerformed

    private void btn_negativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_negativeActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            imageOut = imageFunctions.negativeImg(imageOut);
            imageOutLabel.setIcon(new ImageIcon(imageOut));
        }
    }//GEN-LAST:event_btn_negativeActionPerformed

    private void btn_grayScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_grayScaleActionPerformed
        // TODO add your handling code here:
        if(imageOut != null){
            imageOut = imageFunctions.grayScale(imageOut);
            imageOutLabel.setIcon(new ImageIcon(imageOut));
        }
    }//GEN-LAST:event_btn_grayScaleActionPerformed

    private void btn_saveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveImageActionPerformed
        // TODO add your handling code here:
        if (imageOut != null) {
            JFileChooser fileManager = new JFileChooser(System.getProperty("user.dir"));
            fileManager.setDialogTitle("Select a directory");
            fileManager.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int choose = fileManager.showOpenDialog(null);

            if (choose == JFileChooser.APPROVE_OPTION) {
                if (fileManager.getSelectedFile().isDirectory()) {
                    String filename = JOptionPane.showInputDialog("Enter the image filename (.jpg):");
                    if (filename != null) {
                        if (filename.lastIndexOf(".jpg") != filename.length() - 4
                            && filename.lastIndexOf(".JPG") != filename.length() - 4) {
                            filename += ".jpg";
                        }
                        File saveDirectory = fileManager.getSelectedFile();
                        imageFunctions.writeImage(imageOut, saveDirectory.getPath() + "\\" + filename);
                        }
                    }
                }
            }
    }//GEN-LAST:event_btn_saveImageActionPerformed

    private void btn_readImgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_readImgeActionPerformed
        // TODO add your handling code here:
        JFileChooser fileManager = new JFileChooser(System.getProperty("user.dir"));
        fileManager.setDialogTitle("Select an image");
        fileManager.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("JPEG images", "jpg");
        fileManager.addChoosableFileFilter(fileFilter);

        int choose = fileManager.showOpenDialog(null);

        if (choose == JFileChooser.APPROVE_OPTION) {
            File imageFile = fileManager.getSelectedFile();
            imageIn = imageFunctions.readImage(imageFile.getPath());
            imageOut = imageIn;
            imageInLabel.setIcon(new ImageIcon(imageIn));
            imageOutLabel.setIcon(new ImageIcon(imageIn));
        }
    }//GEN-LAST:event_btn_readImgeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
//        ImageManip imgFunc = new ImageManip();
//        String dir = System.getProperty("user.dir") + "\\";
//        BufferedImage img = imgFunc.readImage(dir+"testIn.jpg");
//
//        img = imgFunc.enlargeImg(img);
//        
//        imgFunc.writeImage(img, dir+"testOut.jpg");
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_anticlockwiseImg;
    private javax.swing.JButton btn_brightness;
    private javax.swing.JButton btn_clockwiseImg;
    private javax.swing.JButton btn_contrast;
    private javax.swing.JButton btn_convolutionImg;
    private javax.swing.JButton btn_enlargeImg;
    private javax.swing.JButton btn_grayScale;
    private javax.swing.JButton btn_horizMirror;
    private javax.swing.JButton btn_negative;
    private javax.swing.JButton btn_quantImage;
    private javax.swing.JButton btn_readImge;
    private javax.swing.JButton btn_reduceImg;
    private javax.swing.JButton btn_saveImage;
    private javax.swing.JButton btn_vertMirror;
    private javax.swing.JLabel imageInLabel;
    private javax.swing.JPanel imageInPanel;
    private javax.swing.JLabel imageOutLabel;
    private javax.swing.JPanel imageOutPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel menuPanel;
    // End of variables declaration//GEN-END:variables
}
